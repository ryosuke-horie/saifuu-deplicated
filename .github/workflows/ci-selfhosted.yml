# セルフホストランナー用CI/CDワークフロー
# 軽量ジョブ（型チェック、リント、ユニットテスト、ビルド、Storybook）を並列実行
#
# 設計判断：
# - セルフホストランナーで高速実行、GitHub Actions無料枠を節約
# - E2Eテストは別途GitHub hosted runnerで実行
# - 並列ジョブによる実行時間最適化
# - 適切なファイル変更トリガーで無駄な実行を回避

name: CI Self-Hosted

on:
  pull_request:
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.json'
      - '**/*.md'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.storybook/**'
      - 'vite.config.ts'
      - 'tailwind.config.ts'
      - 'biome.json'
      - 'tsconfig.json'
      - '.github/workflows/ci-selfhosted.yml'
      # check.ymlの削除により重複実行を防止
  push:
    branches: [main]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.json'
      - 'package.json'
      - 'pnpm-lock.yaml'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # 型チェックとリント
  check:
    runs-on: [self-hosted, linux]
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run type checking and linting
        run: pnpm run check

  # ユニットテスト
  unit-tests:
    runs-on: [self-hosted, linux]
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run unit tests
        run: pnpm test:unit
        env:
          CI: true
          NODE_ENV: test
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  # アプリケーションビルド
  build:
    runs-on: [self-hosted, linux]
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/
          retention-days: 7

  # Storybookビルド
  storybook:
    runs-on: [self-hosted, linux]
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build Storybook
        run: pnpm run build-storybook
        env:
          NODE_ENV: production
      
      - name: Upload Storybook artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/
          retention-days: 7

  # 結果統合とレポート生成
  ci-summary:
    runs-on: [self-hosted, linux]
    needs: [check, unit-tests, build, storybook]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Generate CI summary
        run: |
          echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          # ジョブ結果をチェック
          if [ "${{ needs.check.result }}" == "success" ]; then
            echo "| Type Check & Lint | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Type Check & Lint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.storybook.result }}" == "success" ]; then
            echo "| Storybook | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Storybook | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = {
              check: '${{ needs.check.result }}',
              unitTests: '${{ needs.unit-tests.result }}',
              build: '${{ needs.build.result }}',
              storybook: '${{ needs.storybook.result }}'
            };
            
            const allPassed = Object.values(results).every(r => r === 'success');
            const emoji = allPassed ? '✅' : '❌';
            const status = allPassed ? 'すべて成功' : '一部失敗';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} セルフホストランナーでのCI実行が完了しました（${status}）\n\n詳細はActions画面でご確認ください。`
            });